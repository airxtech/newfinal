// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @map("_id")
  telegramId       Int      @unique
  firstName        String
  lastName         String?
  username         String?
  zoaBalance       Float    @default(0)
  tonBalance       Float?   // From connected wallet
  walletAddress    String?  // TON wallet address
  lastConnected    DateTime? // Last wallet connection timestamp
  scratchChances   Int      @default(3)
  lastChanceReset  DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  referralCode     String   @unique
  referredBy       String?
  referralCount    Int      @default(0)
  tasks            UserTask[]
  tokens           UserToken[]
  transactions     Transaction[]
  createdTokens    Token[]  @relation("TokenCreator")
}

model BondingCurveStep {
  id                String   @id @map("_id")
  stepNumber        Int      @unique
  tokensSold        Int
  priceInTon        Float
  tonCollected      Float
  totalTonCollected Float
  createdAt         DateTime @default(now())
}

model TonPrice {
  id              String   @id @map("_id")
  price           Float    // USD value of 1 TON
  timestamp       DateTime @default(now())
}

model Token {
  id                   String    @id @map("_id")
  name                 String
  ticker               String    
  description          String
  imageUrl             String
  website              String?
  twitter              String?
  telegram             String?
  linkedin             String?   
  isGuaranteed         Boolean   @default(false)
  creator              User      @relation("TokenCreator", fields: [creatorId], references: [id])
  creatorId            String
  totalSupply          Float     @default(800000000) // Updated to 800M tokens
  currentStep          Int       @default(0)  // Current step in bonding curve
  tokensSold           Int       @default(0)  // Total tokens currently sold
  currentPrice         Float     // Current price in USD
  marketCap            Float
  bondingCurve         Float     @default(0) // Percentage filled
  isListed             Boolean   @default(false)
  listingDate          DateTime?
  createdAt            DateTime  @default(now())
  holders              UserToken[]
  transactions         Transaction[]
  contractAddress      String?   
  lastBondingUpdate    DateTime? @default(now())
  bondingCompleteTime  DateTime?
  lastPriceUpdate      DateTime  @default(now())
}

model UserToken {
  id        String   @id @map("_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     Token    @relation(fields: [tokenId], references: [id])
  tokenId   String
  balance   Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, tokenId])
}

model Transaction {
  id          String   @id @map("_id")
  userId      String
  tokenId     String
  type        TransactionType
  amount      Float    // TON amount
  amountUsd   Float    // USD value at transaction time
  tokenAmount Float    // Token amount
  price       Float    // Token price in TON
  priceUsd    Float    // Token price in USD
  tonUsdRate  Float    // TON to USD rate at transaction time
  timestamp   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id])
  token       Token    @relation(fields: [tokenId], references: [id])

  @@index([tokenId, timestamp])
}

model Task {
  id          String    @id @map("_id")
  type        TaskType
  name        String
  description String
  reward      Float
  isDaily     Boolean   @default(false)
  isActive    Boolean   @default(true)
  userTasks   UserTask[]
}

model UserTask {
  id             String   @id @map("_id")
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  task           Task     @relation(fields: [taskId], references: [id])
  taskId         String
  completed      Boolean  @default(false)
  completedAt    DateTime?
  lastCompleted  DateTime? // For daily tasks

  @@unique([userId, taskId])
}

model ProfitWithdrawal {
  id                String   @id @map("_id")
  amount            Float
  destinationWallet String
  timestamp         DateTime @default(now())
  status            String   // PENDING, COMPLETED, FAILED
  transactionHash   String?  // TON transaction hash
}

model PlatformState {
  id                   String   @id @map("_id")
  bondingCurveFunds    Float    @default(0)
  availableProfit      Float    @default(0)
  platformWalletBalance Float    @default(0)
  lastUpdated          DateTime @default(now())
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  FAILED
}

enum TransactionType {
  CREATE
  BUY
  SELL
  OTHER
}

enum TaskType {
  SOCIAL
  DAILY
  REFERRAL
}

